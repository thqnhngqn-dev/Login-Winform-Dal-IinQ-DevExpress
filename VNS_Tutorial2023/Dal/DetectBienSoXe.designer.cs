#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dal
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Detect_bienso")]
	public partial class DetectBienSoXeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaccess(access instance);
    partial void Updateaccess(access instance);
    partial void Deleteaccess(access instance);
    partial void InsertAction(Action instance);
    partial void UpdateAction(Action instance);
    partial void DeleteAction(Action instance);
    partial void InsertAd_min(Ad_min instance);
    partial void UpdateAd_min(Ad_min instance);
    partial void DeleteAd_min(Ad_min instance);
    partial void InsertCamera(Camera instance);
    partial void UpdateCamera(Camera instance);
    partial void DeleteCamera(Camera instance);
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertDriver(Driver instance);
    partial void UpdateDriver(Driver instance);
    partial void DeleteDriver(Driver instance);
    partial void Insertschedule(schedule instance);
    partial void Updateschedule(schedule instance);
    partial void Deleteschedule(schedule instance);
    partial void InsertParking_lot(Parking_lot instance);
    partial void UpdateParking_lot(Parking_lot instance);
    partial void DeleteParking_lot(Parking_lot instance);
    #endregion
		
		public DetectBienSoXeDataContext() : 
				base(global::Dal.Properties.Settings.Default.Detect_biensoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DetectBienSoXeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DetectBienSoXeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DetectBienSoXeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DetectBienSoXeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<access> accesses
		{
			get
			{
				return this.GetTable<access>();
			}
		}
		
		public System.Data.Linq.Table<Action> Actions
		{
			get
			{
				return this.GetTable<Action>();
			}
		}
		
		public System.Data.Linq.Table<Ad_min> Ad_mins
		{
			get
			{
				return this.GetTable<Ad_min>();
			}
		}
		
		public System.Data.Linq.Table<Camera> Cameras
		{
			get
			{
				return this.GetTable<Camera>();
			}
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<Driver> Drivers
		{
			get
			{
				return this.GetTable<Driver>();
			}
		}
		
		public System.Data.Linq.Table<schedule> schedules
		{
			get
			{
				return this.GetTable<schedule>();
			}
		}
		
		public System.Data.Linq.Table<Parking_lot> Parking_lots
		{
			get
			{
				return this.GetTable<Parking_lot>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.access")]
	public partial class access : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_access;
		
		private string _name;
		
		private EntitySet<Ad_min> _Ad_mins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_accessChanging(string value);
    partial void Onid_accessChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public access()
		{
			this._Ad_mins = new EntitySet<Ad_min>(new Action<Ad_min>(this.attach_Ad_mins), new Action<Ad_min>(this.detach_Ad_mins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_access", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_access
		{
			get
			{
				return this._id_access;
			}
			set
			{
				if ((this._id_access != value))
				{
					this.Onid_accessChanging(value);
					this.SendPropertyChanging();
					this._id_access = value;
					this.SendPropertyChanged("id_access");
					this.Onid_accessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="access_Ad_min", Storage="_Ad_mins", ThisKey="id_access", OtherKey="Access_id")]
		public EntitySet<Ad_min> Ad_mins
		{
			get
			{
				return this._Ad_mins;
			}
			set
			{
				this._Ad_mins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ad_mins(Ad_min entity)
		{
			this.SendPropertyChanging();
			entity.access = this;
		}
		
		private void detach_Ad_mins(Ad_min entity)
		{
			this.SendPropertyChanging();
			entity.access = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Action")]
	public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID_action;
		
		private string _ID_car;
		
		private string _Image;
		
		private string _Image2;
		
		private string _In_or_out;
		
		private string _Time;
		
		private string _Id_parkinglot;
		
		private EntityRef<Parking_lot> _Parking_lot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_actionChanging(long value);
    partial void OnID_actionChanged();
    partial void OnID_carChanging(string value);
    partial void OnID_carChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnImage2Changing(string value);
    partial void OnImage2Changed();
    partial void OnIn_or_outChanging(string value);
    partial void OnIn_or_outChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnId_parkinglotChanging(string value);
    partial void OnId_parkinglotChanged();
    #endregion
		
		public Action()
		{
			this._Parking_lot = default(EntityRef<Parking_lot>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_action", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID_action
		{
			get
			{
				return this._ID_action;
			}
			set
			{
				if ((this._ID_action != value))
				{
					this.OnID_actionChanging(value);
					this.SendPropertyChanging();
					this._ID_action = value;
					this.SendPropertyChanged("ID_action");
					this.OnID_actionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_car", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ID_car
		{
			get
			{
				return this._ID_car;
			}
			set
			{
				if ((this._ID_car != value))
				{
					this.OnID_carChanging(value);
					this.SendPropertyChanging();
					this._ID_car = value;
					this.SendPropertyChanged("ID_car");
					this.OnID_carChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image2", DbType="VarChar(MAX)")]
		public string Image2
		{
			get
			{
				return this._Image2;
			}
			set
			{
				if ((this._Image2 != value))
				{
					this.OnImage2Changing(value);
					this.SendPropertyChanging();
					this._Image2 = value;
					this.SendPropertyChanged("Image2");
					this.OnImage2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_In_or_out", DbType="NChar(10)")]
		public string In_or_out
		{
			get
			{
				return this._In_or_out;
			}
			set
			{
				if ((this._In_or_out != value))
				{
					this.OnIn_or_outChanging(value);
					this.SendPropertyChanging();
					this._In_or_out = value;
					this.SendPropertyChanged("In_or_out");
					this.OnIn_or_outChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_parkinglot", DbType="NVarChar(50)")]
		public string Id_parkinglot
		{
			get
			{
				return this._Id_parkinglot;
			}
			set
			{
				if ((this._Id_parkinglot != value))
				{
					if (this._Parking_lot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_parkinglotChanging(value);
					this.SendPropertyChanging();
					this._Id_parkinglot = value;
					this.SendPropertyChanged("Id_parkinglot");
					this.OnId_parkinglotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parking_lot_Action", Storage="_Parking_lot", ThisKey="Id_parkinglot", OtherKey="ID_parkinglot", IsForeignKey=true)]
		public Parking_lot Parking_lot
		{
			get
			{
				return this._Parking_lot.Entity;
			}
			set
			{
				Parking_lot previousValue = this._Parking_lot.Entity;
				if (((previousValue != value) 
							|| (this._Parking_lot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parking_lot.Entity = null;
						previousValue.Actions.Remove(this);
					}
					this._Parking_lot.Entity = value;
					if ((value != null))
					{
						value.Actions.Add(this);
						this._Id_parkinglot = value.ID_parkinglot;
					}
					else
					{
						this._Id_parkinglot = default(string);
					}
					this.SendPropertyChanged("Parking_lot");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ad_min")]
	public partial class Ad_min : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_admin;
		
		private string _Id_parkinglot;
		
		private string _Name;
		
		private string _Password;
		
		private string _Access_id;
		
		private EntityRef<access> _access;
		
		private EntityRef<Parking_lot> _Parking_lot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_adminChanging(int value);
    partial void OnId_adminChanged();
    partial void OnId_parkinglotChanging(string value);
    partial void OnId_parkinglotChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAccess_idChanging(string value);
    partial void OnAccess_idChanged();
    #endregion
		
		public Ad_min()
		{
			this._access = default(EntityRef<access>);
			this._Parking_lot = default(EntityRef<Parking_lot>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_admin", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id_admin
		{
			get
			{
				return this._Id_admin;
			}
			set
			{
				if ((this._Id_admin != value))
				{
					this.OnId_adminChanging(value);
					this.SendPropertyChanging();
					this._Id_admin = value;
					this.SendPropertyChanged("Id_admin");
					this.OnId_adminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_parkinglot", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Id_parkinglot
		{
			get
			{
				return this._Id_parkinglot;
			}
			set
			{
				if ((this._Id_parkinglot != value))
				{
					if (this._Parking_lot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_parkinglotChanging(value);
					this.SendPropertyChanging();
					this._Id_parkinglot = value;
					this.SendPropertyChanged("Id_parkinglot");
					this.OnId_parkinglotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(15) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Access_id", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Access_id
		{
			get
			{
				return this._Access_id;
			}
			set
			{
				if ((this._Access_id != value))
				{
					if (this._access.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccess_idChanging(value);
					this.SendPropertyChanging();
					this._Access_id = value;
					this.SendPropertyChanged("Access_id");
					this.OnAccess_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="access_Ad_min", Storage="_access", ThisKey="Access_id", OtherKey="id_access", IsForeignKey=true)]
		public access access
		{
			get
			{
				return this._access.Entity;
			}
			set
			{
				access previousValue = this._access.Entity;
				if (((previousValue != value) 
							|| (this._access.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._access.Entity = null;
						previousValue.Ad_mins.Remove(this);
					}
					this._access.Entity = value;
					if ((value != null))
					{
						value.Ad_mins.Add(this);
						this._Access_id = value.id_access;
					}
					else
					{
						this._Access_id = default(string);
					}
					this.SendPropertyChanged("access");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parking_lot_Ad_min", Storage="_Parking_lot", ThisKey="Id_parkinglot", OtherKey="ID_parkinglot", IsForeignKey=true)]
		public Parking_lot Parking_lot
		{
			get
			{
				return this._Parking_lot.Entity;
			}
			set
			{
				Parking_lot previousValue = this._Parking_lot.Entity;
				if (((previousValue != value) 
							|| (this._Parking_lot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parking_lot.Entity = null;
						previousValue.Ad_mins.Remove(this);
					}
					this._Parking_lot.Entity = value;
					if ((value != null))
					{
						value.Ad_mins.Add(this);
						this._Id_parkinglot = value.ID_parkinglot;
					}
					else
					{
						this._Id_parkinglot = default(string);
					}
					this.SendPropertyChanged("Parking_lot");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Camera")]
	public partial class Camera : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_camera;
		
		private string _ID_parking_lot;
		
		private EntityRef<Parking_lot> _Parking_lot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_cameraChanging(string value);
    partial void OnID_cameraChanged();
    partial void OnID_parking_lotChanging(string value);
    partial void OnID_parking_lotChanged();
    #endregion
		
		public Camera()
		{
			this._Parking_lot = default(EntityRef<Parking_lot>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_camera", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_camera
		{
			get
			{
				return this._ID_camera;
			}
			set
			{
				if ((this._ID_camera != value))
				{
					this.OnID_cameraChanging(value);
					this.SendPropertyChanging();
					this._ID_camera = value;
					this.SendPropertyChanged("ID_camera");
					this.OnID_cameraChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_parking_lot", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ID_parking_lot
		{
			get
			{
				return this._ID_parking_lot;
			}
			set
			{
				if ((this._ID_parking_lot != value))
				{
					if (this._Parking_lot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_parking_lotChanging(value);
					this.SendPropertyChanging();
					this._ID_parking_lot = value;
					this.SendPropertyChanged("ID_parking_lot");
					this.OnID_parking_lotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parking_lot_Camera", Storage="_Parking_lot", ThisKey="ID_parking_lot", OtherKey="ID_parkinglot", IsForeignKey=true)]
		public Parking_lot Parking_lot
		{
			get
			{
				return this._Parking_lot.Entity;
			}
			set
			{
				Parking_lot previousValue = this._Parking_lot.Entity;
				if (((previousValue != value) 
							|| (this._Parking_lot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parking_lot.Entity = null;
						previousValue.Cameras.Remove(this);
					}
					this._Parking_lot.Entity = value;
					if ((value != null))
					{
						value.Cameras.Add(this);
						this._ID_parking_lot = value.ID_parkinglot;
					}
					else
					{
						this._ID_parking_lot = default(string);
					}
					this.SendPropertyChanged("Parking_lot");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Car")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id_car;
		
		private int _Id_driver;
		
		private string _State;
		
		private string _Desciption;
		
		private EntitySet<schedule> _schedules;
		
		private EntityRef<Driver> _Driver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_carChanging(string value);
    partial void OnId_carChanged();
    partial void OnId_driverChanging(int value);
    partial void OnId_driverChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnDesciptionChanging(string value);
    partial void OnDesciptionChanged();
    #endregion
		
		public Car()
		{
			this._schedules = new EntitySet<schedule>(new Action<schedule>(this.attach_schedules), new Action<schedule>(this.detach_schedules));
			this._Driver = default(EntityRef<Driver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_car", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id_car
		{
			get
			{
				return this._Id_car;
			}
			set
			{
				if ((this._Id_car != value))
				{
					this.OnId_carChanging(value);
					this.SendPropertyChanging();
					this._Id_car = value;
					this.SendPropertyChanged("Id_car");
					this.OnId_carChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_driver", DbType="Int NOT NULL")]
		public int Id_driver
		{
			get
			{
				return this._Id_driver;
			}
			set
			{
				if ((this._Id_driver != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_driverChanging(value);
					this.SendPropertyChanging();
					this._Id_driver = value;
					this.SendPropertyChanged("Id_driver");
					this.OnId_driverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desciption", DbType="NVarChar(MAX)")]
		public string Desciption
		{
			get
			{
				return this._Desciption;
			}
			set
			{
				if ((this._Desciption != value))
				{
					this.OnDesciptionChanging(value);
					this.SendPropertyChanging();
					this._Desciption = value;
					this.SendPropertyChanged("Desciption");
					this.OnDesciptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_schedule", Storage="_schedules", ThisKey="Id_car", OtherKey="id_car")]
		public EntitySet<schedule> schedules
		{
			get
			{
				return this._schedules;
			}
			set
			{
				this._schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Car", Storage="_Driver", ThisKey="Id_driver", OtherKey="ID_driver", IsForeignKey=true)]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._Id_driver = value.ID_driver;
					}
					else
					{
						this._Id_driver = default(int);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_schedules(schedule entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_schedules(schedule entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Driver")]
	public partial class Driver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_driver;
		
		private string _Driver_Name;
		
		private System.Nullable<System.DateTime> _Dateofbirth;
		
		private string _Phone_Number;
		
		private string _Dia_Chi;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_driverChanging(int value);
    partial void OnID_driverChanged();
    partial void OnDriver_NameChanging(string value);
    partial void OnDriver_NameChanged();
    partial void OnDateofbirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateofbirthChanged();
    partial void OnPhone_NumberChanging(string value);
    partial void OnPhone_NumberChanged();
    partial void OnDia_ChiChanging(string value);
    partial void OnDia_ChiChanged();
    #endregion
		
		public Driver()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_driver", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_driver
		{
			get
			{
				return this._ID_driver;
			}
			set
			{
				if ((this._ID_driver != value))
				{
					this.OnID_driverChanging(value);
					this.SendPropertyChanging();
					this._ID_driver = value;
					this.SendPropertyChanged("ID_driver");
					this.OnID_driverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Driver_Name
		{
			get
			{
				return this._Driver_Name;
			}
			set
			{
				if ((this._Driver_Name != value))
				{
					this.OnDriver_NameChanging(value);
					this.SendPropertyChanging();
					this._Driver_Name = value;
					this.SendPropertyChanged("Driver_Name");
					this.OnDriver_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dateofbirth", DbType="Date")]
		public System.Nullable<System.DateTime> Dateofbirth
		{
			get
			{
				return this._Dateofbirth;
			}
			set
			{
				if ((this._Dateofbirth != value))
				{
					this.OnDateofbirthChanging(value);
					this.SendPropertyChanging();
					this._Dateofbirth = value;
					this.SendPropertyChanged("Dateofbirth");
					this.OnDateofbirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_Number", DbType="NVarChar(50)")]
		public string Phone_Number
		{
			get
			{
				return this._Phone_Number;
			}
			set
			{
				if ((this._Phone_Number != value))
				{
					this.OnPhone_NumberChanging(value);
					this.SendPropertyChanging();
					this._Phone_Number = value;
					this.SendPropertyChanged("Phone_Number");
					this.OnPhone_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dia_Chi", DbType="NVarChar(MAX)")]
		public string Dia_Chi
		{
			get
			{
				return this._Dia_Chi;
			}
			set
			{
				if ((this._Dia_Chi != value))
				{
					this.OnDia_ChiChanging(value);
					this.SendPropertyChanging();
					this._Dia_Chi = value;
					this.SendPropertyChanged("Dia_Chi");
					this.OnDia_ChiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Car", Storage="_Cars", ThisKey="ID_driver", OtherKey="Id_driver")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.schedule")]
	public partial class schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_schedule;
		
		private System.DateTime _ngay;
		
		private System.TimeSpan _time;
		
		private string _id_car;
		
		private string _description;
		
		private System.Nullable<long> _id_action;
		
		private EntityRef<Car> _Car;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_scheduleChanging(string value);
    partial void Onid_scheduleChanged();
    partial void OnngayChanging(System.DateTime value);
    partial void OnngayChanged();
    partial void OntimeChanging(System.TimeSpan value);
    partial void OntimeChanged();
    partial void Onid_carChanging(string value);
    partial void Onid_carChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void Onid_actionChanging(System.Nullable<long> value);
    partial void Onid_actionChanged();
    #endregion
		
		public schedule()
		{
			this._Car = default(EntityRef<Car>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_schedule", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_schedule
		{
			get
			{
				return this._id_schedule;
			}
			set
			{
				if ((this._id_schedule != value))
				{
					this.Onid_scheduleChanging(value);
					this.SendPropertyChanging();
					this._id_schedule = value;
					this.SendPropertyChanged("id_schedule");
					this.Onid_scheduleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ngay", DbType="Date NOT NULL")]
		public System.DateTime ngay
		{
			get
			{
				return this._ngay;
			}
			set
			{
				if ((this._ngay != value))
				{
					this.OnngayChanging(value);
					this.SendPropertyChanging();
					this._ngay = value;
					this.SendPropertyChanged("ngay");
					this.OnngayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="Time NOT NULL")]
		public System.TimeSpan time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_car", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string id_car
		{
			get
			{
				return this._id_car;
			}
			set
			{
				if ((this._id_car != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_carChanging(value);
					this.SendPropertyChanging();
					this._id_car = value;
					this.SendPropertyChanged("id_car");
					this.Onid_carChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_action", DbType="BigInt")]
		public System.Nullable<long> id_action
		{
			get
			{
				return this._id_action;
			}
			set
			{
				if ((this._id_action != value))
				{
					this.Onid_actionChanging(value);
					this.SendPropertyChanging();
					this._id_action = value;
					this.SendPropertyChanged("id_action");
					this.Onid_actionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_schedule", Storage="_Car", ThisKey="id_car", OtherKey="Id_car", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.schedules.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.schedules.Add(this);
						this._id_car = value.Id_car;
					}
					else
					{
						this._id_car = default(string);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parking_lot")]
	public partial class Parking_lot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_parkinglot;
		
		private string _Name;
		
		private EntitySet<Action> _Actions;
		
		private EntitySet<Ad_min> _Ad_mins;
		
		private EntitySet<Camera> _Cameras;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_parkinglotChanging(string value);
    partial void OnID_parkinglotChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Parking_lot()
		{
			this._Actions = new EntitySet<Action>(new Action<Action>(this.attach_Actions), new Action<Action>(this.detach_Actions));
			this._Ad_mins = new EntitySet<Ad_min>(new Action<Ad_min>(this.attach_Ad_mins), new Action<Ad_min>(this.detach_Ad_mins));
			this._Cameras = new EntitySet<Camera>(new Action<Camera>(this.attach_Cameras), new Action<Camera>(this.detach_Cameras));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_parkinglot", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_parkinglot
		{
			get
			{
				return this._ID_parkinglot;
			}
			set
			{
				if ((this._ID_parkinglot != value))
				{
					this.OnID_parkinglotChanging(value);
					this.SendPropertyChanging();
					this._ID_parkinglot = value;
					this.SendPropertyChanged("ID_parkinglot");
					this.OnID_parkinglotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parking_lot_Action", Storage="_Actions", ThisKey="ID_parkinglot", OtherKey="Id_parkinglot")]
		public EntitySet<Action> Actions
		{
			get
			{
				return this._Actions;
			}
			set
			{
				this._Actions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parking_lot_Ad_min", Storage="_Ad_mins", ThisKey="ID_parkinglot", OtherKey="Id_parkinglot")]
		public EntitySet<Ad_min> Ad_mins
		{
			get
			{
				return this._Ad_mins;
			}
			set
			{
				this._Ad_mins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parking_lot_Camera", Storage="_Cameras", ThisKey="ID_parkinglot", OtherKey="ID_parking_lot")]
		public EntitySet<Camera> Cameras
		{
			get
			{
				return this._Cameras;
			}
			set
			{
				this._Cameras.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.Parking_lot = this;
		}
		
		private void detach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.Parking_lot = null;
		}
		
		private void attach_Ad_mins(Ad_min entity)
		{
			this.SendPropertyChanging();
			entity.Parking_lot = this;
		}
		
		private void detach_Ad_mins(Ad_min entity)
		{
			this.SendPropertyChanging();
			entity.Parking_lot = null;
		}
		
		private void attach_Cameras(Camera entity)
		{
			this.SendPropertyChanging();
			entity.Parking_lot = this;
		}
		
		private void detach_Cameras(Camera entity)
		{
			this.SendPropertyChanging();
			entity.Parking_lot = null;
		}
	}
}
#pragma warning restore 1591
